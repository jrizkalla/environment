source $HOME/.bash_profile

fpath=($ENV/zsh/plugins/complete_funcs $fpath)

# Load colors
autoload -U colors && colors

# Customize the prompt
setopt prompt_subst
setopt extendedglob
setopt hist_ignorespace

alias kk=' echo "$(fc -ln -1)" && eval "$(fc -ln -1)"'

BASE_PROMPT1="%{$fg[yellow]%}%!. [%{$fg[cyan]%}%D{%I:%M:%S %p}%{$fg[yellow]%}]" # 1. [time]
BASE_PROMPT2="%{$fg[yellow]%}$> %{$reset_color%}" #$> 
# Set a timeout to 1 second (to update the clock)
# 
#TMOUT=1
#function TRAPALRM {
#    if [ "$WIDGET" != "expand-or-complete" ]; then
#        zle reset-prompt
#    fi
#}

BASE_RPROMPT="%M %{$fg[white]%}%{$fg[cyan]%}%1d%{$reset_color%}"
RPROMPT="$BASE_RPROMPT"

#PS2='%_ > '


# Enable auto completion
#source "$ENV/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh"
zmodload zsh/complist
autoload -Uz compinit && compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
setopt completealiases
setopt menu_complete

# Type the name of the directory without cd
setopt autocd
# don't enable correction (I don't like it)
# setopt correctall

# Set vi mode
bindkey -v
#export KEYTIMEOUT=20 # Kill the lag (don't need this with jk instead of <esc>)
#bindkey -M viins 'jk' vi-cmd-mode

autoload -z edit-command-line
zle -N edit-command-line
bindkey "jk" edit-command-line

bindkey '^?' backward-delete-char
function ctrl-z-widget {
    clear
    fg
}
zle -N ctrl-z-widget
bindkey '^z' ctrl-z-widget


# Add an indicator of the current mode (normal or insert)
function zle-keymap-select {
    mode="n"
    if [ "$KEYMAP" = "main" ]; then
        mode="i"
    fi
    PROMPT="$BASE_PROMPT1 %(?.%{$fg[green]%}.%{$fg[red]%})$mode$BASE_PROMPT2"
    zle reset-prompt
}
zle -N zle-keymap-select

# Git branch in status
export _rprompt_use_radar_title=false

function zle-line-init {
    zle && zle zle-keymap-select
    
    if [ $_rprompt_use_radar_title = "true" ]; then
        curr_radar=$(curr-radar --id-only 2>/dev/null)
        if [ -n "$curr_radar" ]; then
            branch=$(radartitle $curr_radar)
        else
            branch=""
        fi
    else
        branch="$(curr-radar 2>/dev/null)"
    fi
    if [ -z "$branch" ]; then
        branch=$(basename "$(git symbolic-ref HEAD 2>/dev/null)")
    fi
    # Set the color based on wether the current repo is clean or not
    git diff --cached --exit-code >/dev/null 2>&1
    if [ $? -eq 0 ]; then
        # are there untracked files?
        if [ -z "$(git status --porcelain)" ]; then
            color='green'
        else
            color='red'
        fi
    else
        color='red'
    fi
    
    if [ -n "$branch" ]; then
        branch="[%{$fg_bold[$color]%}$branch%{$reset_color%}]"
    fi
    
    # also get the Python virtual environment name (if it exists)
    if [ -n "$VIRTUAL_ENV" ]; then
        virtual_env="(%{$fg[yellow]%}$(basename $VIRTUAL_ENV)%{$reset_color%})"
    else
        virtual_env=""
    fi
    
    base_prompt="$BASE_RPROMPT"
    
    # (don't ask why)
    #if [ "$(basename $(dirname $(pwd)))" = "green" ]; then
    if dir-contains "$(pwd)" "green"; then
        base_prompt="%{$fg[green]%}%1d%{$reset_color%}"
    fi
    
    RPROMPT="$base_prompt$virtual_env $branch"
    zle && zle reset-prompt
}
zle -N zle-line-init

function curr-radar-title {
    if [ "$_rprompt_use_radar_title" = "true" ]; then
        export _rprompt_use_radar_title=false
    else
        export _rprompt_use_radar_title=true
    fi
    zle zle-line-init
}
zle -N curr-radar-title
bindkey -a 's' curr-radar-title



# Save the history between sessions
HISTSIZE=1000
HISTFILE="$HOME/.zsh_history_file"
SAVEHIST=1000

# Share the history
setopt SHARE_HISTORY

# Enable fish like syntax highlighting
source "$ENV/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
# Enable fish like autosuggestions
source "$ENV/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"

bindkey '^f' autosuggest-accept
bindkey '^g' forward-word

# make ctrl-a clear the display since l is being used for something else
bindkey -s '^a' '^l'


# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export PATH="/usr/local/opt/ruby/bin:$PATH"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

[ -f "/Users/jrizkalla/.ghcup/env" ] && source "/Users/jrizkalla/.ghcup/env" # ghcup-envexport PATH="/opt/homebrew/opt/llvm/bin:$PATH"

export PATH="/opt/homebrew/opt/llvm/bin:$PATH"


# Load Angular CLI autocompletion
which ng 2>/dev/null 1>&2
if [ $? -eq 0 ]; then
	source <(ng completion script)
fi

# Added by Amplify CLI binary installer
export PATH="$HOME/.amplify/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


eval $(thefuck --alias)

op --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
    eval "$(op completion zsh)"
    compdef _op op
fi
